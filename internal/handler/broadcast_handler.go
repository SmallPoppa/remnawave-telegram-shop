package handler

import (
	"context"
	"fmt"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"log/slog"
	"remnawave-tg-shop-bot/internal/broadcast"
	"remnawave-tg-shop-bot/internal/config"
	"remnawave-tg-shop-bot/internal/database"
	"strings"
	"time"
)

// PMCommandHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /pm –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (h Handler) PMCommandHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if update.Message.From.ID != config.GetAdminTelegramId() {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
		slog.Info("Unauthorized PM command attempt", "userId", update.Message.From.ID)
		return
	}

	// –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —É–±–∏—Ä–∞—è /pm
	messageText := strings.TrimSpace(strings.TrimPrefix(update.Message.Text, "/pm"))
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
	if messageText == "" {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
		_, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/pm —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è`\n–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.",
			ParseMode: models.ParseModeMarkdown,
		})
		if err != nil {
			slog.Error("Error sending PM usage instructions", err)
		}
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Å—ã–ª–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	broadcast := &broadcast.Broadcast{
		SenderID: update.Message.From.ID,
		Message:  messageText,
		Status:   broadcast.BroadcastStatusPending,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
	broadcastRepo := broadcast.NewBroadcastRepository(h.customerRepository.GetPool())
	broadcastId, err := broadcastRepo.Create(ctx, broadcast)
	
	if err != nil {
		slog.Error("Error creating broadcast record", err)
		_, err = b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.",
		})
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...",
	})
	if err != nil {
		slog.Error("Error sending broadcast confirmation", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞
	subscribers, err := broadcastRepo.GetAllSubscribers(ctx, update.Message.From.ID)
	if err != nil {
		slog.Error("Error getting subscribers", err)
		_, err = b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
		})
		return
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
	go h.processBroadcast(context.Background(), b, broadcastId, messageText, subscribers, update.Message.From.ID)
}

// processBroadcast –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
func (h *Handler) processBroadcast(ctx context.Context, b *bot.Bot, broadcastId int64, message string, subscribers []int64, adminId int64) {
	broadcastRepo := broadcast.NewBroadcastRepository(h.customerRepository.GetPool())
	
	totalCount := len(subscribers)
	successCount := 0
	failCount := 0
	
	// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (29 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –º–∞–∫—Å–∏–º—É–º)
	rateLimitDelay := time.Millisecond * 35

	for _, subscriberId := range subscribers {
		_, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: subscriberId,
			Text:   message,
			ParseMode: models.ParseModeHTML, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		})

		if err != nil {
			slog.Error("Error sending broadcast to user", 
				"userId", subscriberId, 
				"error", err)
			failCount++
		} else {
			successCount++
		}

		// –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API Telegram
		time.Sleep(rateLimitDelay)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
	status := broadcast.BroadcastStatusSent
	if failCount > 0 && failCount == totalCount {
		status = broadcast.BroadcastStatusFailed
	}
	
	err := broadcastRepo.UpdateStatus(ctx, broadcastId, status)
	if err != nil {
		slog.Error("Error updating broadcast status", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	summary := fmt.Sprintf(
		"üìä –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ:\n\n"+
		"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n"+
		"‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: %d\n"+
		"üì® –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: %d",
		successCount, failCount, totalCount)

	_, err = b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: adminId,
		Text:   summary,
	})
	if err != nil {
		slog.Error("Error sending broadcast summary", err)
	}
}